digraph KPI_Parser_Loop {
    rankdir=TB;
    node [shape=box, style=filled, fontname="Arial"];
    edge [fontname="Arial"];
    
    // Parser Loop Flow
    subgraph cluster_initialization {
        label="Initialization Phase";
        style=filled;
        color=lightblue;
        
        start [label="Start Parse()", fillcolor=lightcyan];
        scan_index [label="Extract Scan Index\nfrom First Stream", fillcolor=lightcyan];
        init_models [label="Initialize Models\nwith Scan Index", fillcolor=lightcyan];
    }
    
    subgraph cluster_stream_loop {
        label="Stream Processing Loop";
        style=filled;
        color=lightgreen;
        
        stream_start [label="For Each Stream\n[stream_idx, stream]", fillcolor=lightgreen];
        init_parent [label="init_parent()\n[{stream_idx}_{stream}]", fillcolor=palegreen];
        check_files [label="Check HDF Files\nExist for Stream", fillcolor=palegreen];
        
        // Input Processing Branch
        parse_input [label="Parse Input Stream\nKPIHDFParser.parse()", fillcolor=lightgreen];
        store_input [label="Store in\nstream_input_model", fillcolor=lightgreen];
        
        // Output Processing Branch  
        parse_output [label="Parse Output Stream\nKPIHDFParser.parse()", fillcolor=lightgreen];
        store_output [label="Store in\nstream_output_model", fillcolor=lightgreen];
        
        next_stream [label="Next Stream", fillcolor=palegreen];
    }
    
    subgraph cluster_data_model {
        label="Data Model Operations";
        style=filled;
        color=lightyellow;
        
        set_value [label="set_value()\nDataset, Signal, Group", fillcolor=lightyellow];
        check_parent [label="Check if New Parent\nGroup", fillcolor=wheat];
        process_dataset [label="Process Dataset\nRound & Store", fillcolor=wheat];
        update_mappings [label="Update Signal\nMappings", fillcolor=wheat];
        generate_keys [label="Generate Keys\n{parent}_{child}", fillcolor=wheat];
    }
    
    subgraph cluster_completion {
        label="Completion Phase";
        style=filled;
        color=lightcoral;
        
        create_kpi [label="Create KpiDataModel\nwith Both Models", fillcolor=lightcoral];
        close_files [label="Close HDF5 Files", fillcolor=salmon];
        return_results [label="Return Results\nwith HTML Path", fillcolor=salmon];
    }
    
    // Flow connections
    start -> scan_index;
    scan_index -> init_models;
    init_models -> stream_start;
    
    stream_start -> init_parent;
    init_parent -> check_files;
    
    check_files -> parse_input [label="Input exists"];
    check_files -> parse_output [label="Output exists"];
    
    parse_input -> store_input;
    parse_output -> store_output;
    
    store_input -> set_value;
    store_output -> set_value;
    
    set_value -> check_parent;
    check_parent -> process_dataset [label="New parent"];
    check_parent -> update_mappings [label="Child item"];
    
    process_dataset -> generate_keys;
    update_mappings -> generate_keys;
    generate_keys -> next_stream;
    
    next_stream -> stream_start [label="More streams", style=dashed];
    next_stream -> create_kpi [label="All streams done"];
    
    create_kpi -> close_files;
    close_files -> return_results;
}
