digraph DataPrepFlow {
    // Graph settings
    rankdir=TB;
    node [shape=box, style=filled, fontname="Arial", fontsize=10];
    edge [fontname="Arial", fontsize=9];
    
    // Color scheme
    subgraph cluster_inputs {
        label="Input Parameters";
        style=filled;
        color=lightblue;
        
        input_data [label="input_data\n(DataModelStorage)", shape=cylinder, fillcolor=lightcyan];
        output_data [label="output_data\n(DataModelStorage)", shape=cylinder, fillcolor=lightcyan];
        html_name [label="html_name\n(String)", fillcolor=lightyellow];
        sensor [label="sensor\n(String)", fillcolor=lightyellow];
        stream_name [label="stream_name\n(String)", fillcolor=lightyellow];
        input_file_name [label="input_file_name\n(String)", fillcolor=lightyellow];
        output_file_name [label="output_file_name\n(String)", fillcolor=lightyellow];
        output_dir [label="output_dir\n(String, optional)", fillcolor=lightyellow];
        generate_html [label="generate_html\n(Boolean, default: True)", fillcolor=lightyellow];
    }
    
    // DataPrep initialization
    subgraph cluster_dataprep {
        label="DataPrep Class";
        style=filled;
        color=lightgreen;
        
        dataprep_init [label="DataPrep.__init__()\nInitialize with parameters", fillcolor=palegreen];
        track_memory [label="_track_memory_usage()\nMonitor memory consumption", fillcolor=palegreen];
        generate_plots [label="generate_plots()\nMain plot generation method", fillcolor=palegreen];
    }
    
    // Plot generation process
    subgraph cluster_plot_gen {
        label="Plot Generation Process";
        style=filled;
        color=lightcoral;
        
        import_data_cal [label="Import DataCalculations\nfrom data_cal module", fillcolor=mistyrose];
        setup_multiprocessing [label="Setup Multiprocessing\n- Create temp directory\n- Prepare shared data\n- Configure pool", fillcolor=mistyrose];
        get_stream_signals [label="Get Stream Signals\nfrom Gen7V1_V2 config", fillcolor=mistyrose];
        process_signals [label="Process Signals\n(Parallel/Sequential)", fillcolor=mistyrose];
        signal_plot_paths [label="signal_plot_paths\n(Dictionary of plot paths)", shape=cylinder, fillcolor=lightcyan];
    }
    
    // Signal processing
    subgraph cluster_signal_processing {
        label="Individual Signal Processing";
        style=filled;
        color=lightsteelblue;
        
        process_signal [label="_process_signal_plot()\nProcess single signal", fillcolor=lightblue];
        get_data_cached [label="_get_data_cached()\nLRU cached data retrieval", fillcolor=lightblue];
        check_aliases [label="Check Signal Aliases\nFallback mechanism", fillcolor=lightblue];
        create_plots [label="Create Plot Types\nBased on signal config", fillcolor=lightblue];
        save_json [label="Save Plot as JSON\nin temp directory", fillcolor=lightblue];
    }
    
    // HTML generation
    subgraph cluster_html_gen {
        label="HTML Generation";
        style=filled;
        color=lightpink;
        
        html_generator [label="HtmlGenerator\nConstructor", fillcolor=pink];
        create_folder_structure [label="_create_folder_structure()\nOrganize directories", fillcolor=pink];
        load_categorize_plots [label="_load_and_categorize_plots()\nCategorize by type", fillcolor=pink];
        generate_html_files [label="generate_and_save_html_files()\nCreate HTML files", fillcolor=pink];
        create_main_index [label="_create_main_html_index()\nGenerate main index", fillcolor=pink];
        master_index [label="create_master_index()\nNested dropdown structure", fillcolor=pink];
    }
    
    // Output files
    subgraph cluster_outputs {
        label="Generated Outputs";
        style=filled;
        color=lightgoldenrod;
        
        category_html [label="Category HTML Files\n(histogram, mismatch, kpi, etc.)", shape=cylinder, fillcolor=lightyellow];
        main_html [label="Main HTML Index\nwith navigation", shape=cylinder, fillcolor=lightyellow];
        master_html [label="Master Index HTML\nwith nested dropdowns", shape=cylinder, fillcolor=lightyellow];
        temp_cleanup [label="Cleanup Temp Directory\nRemove temporary files", fillcolor=lightyellow];
    }
    
    // Data flow connections
    // Input parameters to DataPrep
    input_data -> dataprep_init;
    output_data -> dataprep_init;
    html_name -> dataprep_init;
    sensor -> dataprep_init;
    stream_name -> dataprep_init;
    input_file_name -> dataprep_init;
    output_file_name -> dataprep_init;
    output_dir -> dataprep_init;
    generate_html -> dataprep_init;
    
    // DataPrep internal flow
    dataprep_init -> track_memory;
    dataprep_init -> generate_plots;
    
    // Plot generation flow
    generate_plots -> import_data_cal;
    generate_plots -> setup_multiprocessing;
    generate_plots -> get_stream_signals;
    get_stream_signals -> process_signals;
    process_signals -> signal_plot_paths;
    
    // Signal processing details
    process_signals -> process_signal;
    process_signal -> get_data_cached;
    get_data_cached -> check_aliases;
    check_aliases -> create_plots;
    create_plots -> save_json;
    save_json -> signal_plot_paths;
    
    // HTML generation flow
    signal_plot_paths -> html_generator;
    html_generator -> create_folder_structure;
    html_generator -> load_categorize_plots;
    load_categorize_plots -> generate_html_files;
    generate_html_files -> create_main_index;
    create_main_index -> category_html;
    create_main_index -> main_html;
    
    // Master index creation
    generate_html_files -> master_index;
    master_index -> master_html;
    
    // Cleanup
    generate_html_files -> temp_cleanup;
    
    // Data dependencies
    input_data -> get_data_cached [style=dashed, color=blue];
    output_data -> get_data_cached [style=dashed, color=blue];
    stream_name -> get_stream_signals [style=dashed, color=blue];
    sensor -> create_folder_structure [style=dashed, color=blue];
    stream_name -> create_folder_structure [style=dashed, color=blue];
    
    // Conditional flow
    generate_html -> html_generator [style=dotted, color=red, label="if True"];
    generate_html -> temp_cleanup [style=dotted, color=red, label="if False"];
    
    // Memory management
    track_memory -> generate_plots [style=dashed, color=orange, label="Memory monitoring"];
    
    // Legend
    subgraph cluster_legend {
        label="Legend";
        style=filled;
        color=white;
        
        legend_input [label="Input Parameters", fillcolor=lightyellow];
        legend_process [label="Processing Steps", fillcolor=palegreen];
        legend_data [label="Data Storage", shape=cylinder, fillcolor=lightcyan];
        legend_output [label="Output Files", fillcolor=lightyellow];
        legend_conditional [label="Conditional Flow", style=dotted, color=red];
        legend_dependency [label="Data Dependencies", style=dashed, color=blue];
    }
} 