#include "kpi_html_gen.h"
#include <fstream>
#include <sstream>
#include <filesystem>
#include <iostream>

namespace kpi {
namespace presentation {

KPIHtmlGenerator::KPIHtmlGenerator() = default;
KPIHtmlGenerator::~KPIHtmlGenerator() = default;

std::string KPIHtmlGenerator::generate_report(
    const std::vector<std::string>& plot_files,
    const std::string& sensor_id,
    const std::string& base_name,
    const std::string& output_path) {
    
    std::ofstream html_file(output_path);
    if (!html_file.is_open()) {
        std::cerr << "Failed to create HTML report: " << output_path << std::endl;
        return "";
    }
    
    std::string title = "KPI Report - " + sensor_id + " (" + base_name + ")";
    
    // Write HTML header
    html_file << generate_header(title);
    
    // Add main content
    html_file << "<div class=\"container\">\n";
    html_file << "<h1>" << title << "</h1>\n";
    html_file << "<div class=\"summary\">\n";
    html_file << "<p><strong>Sensor ID:</strong> " << sensor_id << "</p>\n";
    html_file << "<p><strong>Base Name:</strong> " << base_name << "</p>\n";
    html_file << "<p><strong>Total KPI Plots:</strong> " << plot_files.size() << "</p>\n";
    html_file << "</div>\n";
    
    // Add navigation
    html_file << "<div class=\"navigation\">\n";
    html_file << "<h2>KPI Analysis Sections</h2>\n";
    html_file << "<ul>\n";
    for (const auto& plot_file : plot_files) {
        std::string plot_type = get_plot_type_from_filename(plot_file);
        std::filesystem::path path(plot_file);
        std::string filename = path.filename().string();
        html_file << "<li><a href=\"#" << filename << "\">" << plot_type << " - " << filename << "</a></li>\n";
    }
    html_file << "</ul>\n";
    html_file << "</div>\n";
    
    // Embed plot files
    html_file << "<div class=\"plots\">\n";
    for (const auto& plot_file : plot_files) {
        html_file << embed_plot_file(plot_file);
    }
    html_file << "</div>\n";
    
    html_file << "</div>\n";
    
    // Write HTML footer
    html_file << generate_footer();
    
    html_file.close();
    
    std::cout << "Generated KPI HTML report: " << output_path << std::endl;
    return output_path;
}

std::string KPIHtmlGenerator::generate_header(const std::string& title) {
    std::stringstream ss;
    ss << "<!DOCTYPE html>\n";
    ss << "<html lang=\"en\">\n";
    ss << "<head>\n";
    ss << "    <meta charset=\"UTF-8\">\n";
    ss << "    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n";
    ss << "    <title>" << title << "</title>\n";
    ss << "    <style>\n";
    ss << "        body { font-family: Arial, sans-serif; margin: 0; padding: 20px; background-color: #f5f5f5; }\n";
    ss << "        .container { max-width: 1200px; margin: 0 auto; background-color: white; padding: 20px; border-radius: 8px; box-shadow: 0 2px 4px rgba(0,0,0,0.1); }\n";
    ss << "        h1 { color: #333; border-bottom: 2px solid #007bff; padding-bottom: 10px; }\n";
    ss << "        h2 { color: #555; margin-top: 30px; }\n";
    ss << "        .summary { background-color: #f8f9fa; padding: 15px; border-radius: 5px; margin: 20px 0; }\n";
    ss << "        .navigation ul { list-style-type: none; padding: 0; }\n";
    ss << "        .navigation li { margin: 5px 0; }\n";
    ss << "        .navigation a { color: #007bff; text-decoration: none; }\n";
    ss << "        .navigation a:hover { text-decoration: underline; }\n";
    ss << "        .plot-section { margin: 30px 0; padding: 20px; border: 1px solid #ddd; border-radius: 5px; }\n";
    ss << "        .plot-iframe { width: 100%; height: 600px; border: none; }\n";
    ss << "    </style>\n";
    ss << "</head>\n";
    ss << "<body>\n";
    return ss.str();
}

std::string KPIHtmlGenerator::generate_footer() {
    std::stringstream ss;
    ss << "<footer style=\"margin-top: 40px; padding-top: 20px; border-top: 1px solid #ddd; text-align: center; color: #666;\">\n";
    ss << "    <p>Generated by KPI Analysis System - C++ Implementation</p>\n";
    ss << "    <p>Report generated at: " << std::chrono::system_clock::now().time_since_epoch().count() << "</p>\n";
    ss << "</footer>\n";
    ss << "</body>\n";
    ss << "</html>\n";
    return ss.str();
}

std::string KPIHtmlGenerator::embed_plot_file(const std::string& plot_file) {
    std::filesystem::path path(plot_file);
    std::string filename = path.filename().string();
    std::string plot_type = get_plot_type_from_filename(plot_file);
    
    std::stringstream ss;
    ss << "<div class=\"plot-section\" id=\"" << filename << "\">\n";
    ss << "    <h3>" << plot_type << " Analysis - " << filename << "</h3>\n";
    
    // Read the plot file content and embed it
    std::ifstream plot_content(plot_file);
    if (plot_content.is_open()) {
        std::string line;
        bool in_body = false;
        while (std::getline(plot_content, line)) {
            if (line.find("<body>") != std::string::npos) {
                in_body = true;
                continue;
            }
            if (line.find("</body>") != std::string::npos) {
                break;
            }
            if (in_body) {
                ss << "    " << line << "\n";
            }
        }
        plot_content.close();
    } else {
        ss << "    <p>Error: Could not load plot file " << plot_file << "</p>\n";
    }
    
    ss << "</div>\n";
    return ss.str();
}

std::string KPIHtmlGenerator::get_plot_type_from_filename(const std::string& filename) {
    if (filename.find("alignment") != std::string::npos) {
        return "Alignment KPI";
    } else if (filename.find("detection") != std::string::npos) {
        return "Detection KPI";
    } else if (filename.find("tracker") != std::string::npos) {
        return "Tracker KPI";
    }
    return "Unknown KPI";
}

} // namespace presentation
} // namespace kpi
