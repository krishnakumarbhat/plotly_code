import pytest
import pandas as pd
import numpy as np
import os
import shutil
import logging
import tempfile
from unittest.mock import MagicMock, patch

import plotly.graph_objects as go

# Assuming these are the classes to be tested
from InteractivePlot.e_presentation_layer.html_generator import HtmlGenerator # Corrected class name
from InteractivePlot.e_presentation_layer.plotly_visualization import PlotlyCharts # Corrected class name based on implementation


# Fixture for sample plot data
@pytest.fixture
def sample_plot_data_pd(): # Renamed to avoid conflict if another 'sample_plot_data' is used
    return pd.DataFrame({
        'x_values': [1, 2, 3, 4],
        'y_values': [10, 15, 13, 17]
    })

@pytest.fixture
def sample_plot_data_np():
    return {
        'x': np.array([1, 2, 3, 4, 5]),
        'y1': np.array([10, 12, 8, 15, 11]),
        'y2': np.array([5, 7, 3, 10, 6])
    }


# Tests for HtmlGenerator
@pytest.fixture
def html_generator_fixture(): # Renamed to avoid conflict
    output_dir = tempfile.mkdtemp()
    logger = logging.getLogger(__name__)
    # Use the corrected class name 'HtmlGenerator'
    gen = HtmlGenerator(output_dir, logger)
    yield gen
    shutil.rmtree(output_dir)

def test_html_generator_init(html_generator_fixture):
    assert isinstance(html_generator_fixture, HtmlGenerator)
    assert os.path.isdir(html_generator_fixture.output_dir)

@patch('InteractivePlot.e_presentation_layer.html_generator.PlotlyCharts') # Patching where PlotlyCharts is used
def test_html_generator_generate_html_report(mock_plotly_charts_in_html, html_generator_fixture, sample_plot_data_np):
    mock_fig = MagicMock(spec=go.Figure)
    # Configure mock PlotlyCharts methods used by HtmlGenerator
    # This assumes HtmlGenerator might call various plot types from PlotlyCharts
    mock_plotly_charts_in_html.scatter_plot.return_value = mock_fig
    mock_plotly_charts_in_html.bar_plot.return_value = mock_fig
    # Add other mocks if HtmlGenerator calls other PlotlyCharts methods

    report_data = {
        'stream1': {
            'SignalScatter': {
                'fig_id': 'fig_scatter_1',
                'fig': mock_fig, # This fig would be generated by DataCal and passed to HtmlGenerator
                'plot_type': 'scatter_plot' # This key should match what HtmlGenerator expects
            },
            'SignalBar': {
                'fig_id': 'fig_bar_1',
                'fig': mock_fig,
                'plot_type': 'bar_plot'
            }
        }
    }
    metadata = {
        'input_file': 'input.h5',
        'output_file': 'output.h5',
        'sensor_positions': {'s1': 'front'}
    }

    # It seems generate_html_report itself might not directly call PlotlyCharts methods
    # if figures are pre-generated and passed in `report_data`.
    # The patch on PlotlyCharts might be more relevant if HtmlGenerator *itself* creates plots.
    # For now, we assume figures are passed in.

    html_file_path = html_generator_fixture.generate_html_report(report_data, metadata)

    assert os.path.exists(html_file_path)
    assert html_file_path.endswith('.html')

    with open(html_file_path, 'r', encoding='utf-8') as f:
        content = f.read()
        assert "Resim HTML Report" in content
        assert "SignalScatter" in content # Check for signal names used as titles/headers
        assert "SignalBar" in content
        assert "input.h5" in content
        assert "output.h5" in content
        assert "s1" in content
        assert 'id="fig_scatter_1"' in content
        assert 'id="fig_bar_1"' in content

# Tests for PlotlyCharts (previously PlotlyVisualization in this test file)
@pytest.fixture
def plotly_charts_fixture(): # Renamed to avoid conflict
    return PlotlyCharts()

def test_plotly_charts_scatter_plot(plotly_charts_fixture, sample_plot_data_np):
    fig = plotly_charts_fixture.scatter_plot(
        x_vals=sample_plot_data_np['x'],
        y_vals=sample_plot_data_np['y1'],
        y2_vals=sample_plot_data_np['y2'],
        signal_name="Test Scatter",
        input_name="Input Y1",
        output_name="Output Y2",
        color1="purple",
        color2="orange",
        title_suffix="Suffix"
    )
    assert isinstance(fig, go.Figure)
    assert len(fig.data) == 2
    assert fig.layout.title.text == "Test Scatter Suffix"
    assert fig.data[0].name == "Input Y1"
    assert fig.data[1].name == "Output Y2"

def test_plotly_charts_bar_plot(plotly_charts_fixture, sample_plot_data_np):
    fig = plotly_charts_fixture.bar_plot(
        x_vals=sample_plot_data_np['x'],
        y_vals=sample_plot_data_np['y1'],
        signal_name="Test Bar",
        input_name="Input Y1 Bar",
        output_name="", # Bar plot in PlotlyCharts seems to take only one y series for main data
        color1="cyan",
        title_suffix="Bar Suffix"
    )
    assert isinstance(fig, go.Figure)
    assert len(fig.data) == 1
    assert fig.layout.title.text == "Test Bar Bar Suffix"
    assert fig.data[0].name == "Input Y1 Bar"

# Add tests for other PlotlyCharts methods like scatter_plot_mstokmh, scatter_plot_bs_si_sr
# Ensure to mock `go.Figure().add_trace` and `go.Figure().update_layout` if you want to verify
# the specifics of how Plotly objects are constructed, similar to the original commented out tests.
# For simplicity here, we are checking the returned Figure object's properties.