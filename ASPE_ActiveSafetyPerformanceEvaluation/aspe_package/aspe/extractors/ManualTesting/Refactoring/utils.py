from pathlib import Path

import pandas as pd


def log_path_to_log_name(log_path: str) -> str:
    """
    Converts full path to log file into a simple log name.
    :param log_path: a path to log file
    :return: simple log name (only filename with extension)
    """
    log_name = Path(log_path).name  # get file name with extension
    return log_name


def assert_dicts_equal(left: dict, right: dict) -> None:
    """
    Asserts equivalency of two dicts.
    Two dicts are equal if and only if they have same keys and same values for each key.
    :param left:
    :param right:
    :return:
    """
    assert sorted(left) == sorted(right)


def assert_signals_equal(signals_before: pd.DataFrame, signals_after: pd.DataFrame) -> None:
    """
    Asserts equivalency of two pandas DataFrames.
    :param signals_before:
    :param signals_after:
    :return:
    """
    pd.testing.assert_frame_equal(signals_before, signals_after, check_dtype=False, check_like=True)


def assert_datasets_equal(dataset_dict_before: dict, dataset_dict_after: dict, compare_signals=True,
                          compare_properties=True) -> None:
    """
    Asserts equivalency of two dicts generated from IDataSet objects.
    :param dataset_dict_before: a dict generated by IDataSet.to_dict
    :param dataset_dict_after: a dict generated by IDataSet.to_dict
    :param compare_signals: whether to compare signals (True) or not (False)
    :param compare_properties: whether to compare properties (True) or not (False)
    :return:
    """
    if compare_signals:
        signals_before = dataset_dict_before['signals']
        signals_after = dataset_dict_after['signals']
        assert_signals_equal(signals_before, signals_after)

    if compare_properties:
        properties_before = {k: v for k, v in dataset_dict_before.items() if k != 'signals'}
        properties_after = {k: v for k, v in dataset_dict_after.items() if k != 'signals'}
        assert_dicts_equal(properties_before, properties_after)


def assert_extracted_data_dict_equal(extracted_data_dict_before: dict, extracted_data_dict_after: dict,
                                     compare_metadata=True, compare_datasets=True) -> None:
    """
    Asserts equivalency of two dicts generated from ExtractedData objects.
    :param extracted_data_dict_before: a dict generated by ExtractedData.to_dict
    :param extracted_data_dict_after: a dict generated by ExtractedData.to_dict
    :param compare_metadata: whether to compare metadata (True) or not (False)
    :param compare_datasets: whether to compare datasets (True) or not (False)
    :return:
    """
    if compare_metadata:
        metadata_before = extracted_data_dict_before['metadata']
        metadata_after = extracted_data_dict_after['metadata']
        assert_dicts_equal(metadata_before, metadata_after)

    if compare_datasets:
        data_before = extracted_data_dict_before['data']
        data_after = extracted_data_dict_after['data']
        for dataset_name in 'detections', 'F360ExecutionTimeInfo', 'host', 'internal_objects', 'objects', 'sensors', 'F360TrackerInfo':
            dataset_exists_before = (dataset_name in data_before)
            dataset_exists_after = (dataset_name in data_after)
            assert dataset_exists_before is dataset_exists_after

            if dataset_exists_after:
                dataset_before = data_before[dataset_name]
                dataset_after = data_after[dataset_name]
                assert_datasets_equal(dataset_before, dataset_after)
